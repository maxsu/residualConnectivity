project(residualConnectivity)
cmake_minimum_required(VERSION 3.1)
set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/cmake" "${CMAKE_SOURCE_DIR}/..")
set(Boost_USE_STATIC_LIBS	OFF)
set(Boost_USE_MULTITHREADED	ON)
set(Boost_USE_STATIC_RUNTIME	OFF)

option(BUILD_R_PACKAGE "Build R package" ON)
option(BUILD_MATLAB_PACKAGE "Build Matlab package" ON)
option(BUILD_VISUALISATION "Build visualisation code" ON)

if(CMAKE_COMPILER_IS_GNUCC)
	add_definitions("-Wall")
endif()
find_package(Boost 1.53.0 COMPONENTS graph program_options system serialization filesystem regex REQUIRED)
find_package(OpenMP REQUIRED)

if(NOT DEFINED EIGEN_INCLUDE_DIR)
	message(FATAL_ERROR "Please point the environment variable EIGEN_INCLUDE_DIR to the include directory of your Eigen3 installation.")
endif()
include_directories("${EIGEN_INCLUDE_DIR}")

if(BUILD_VISUALISATION)
	find_package(igraph REQUIRED)
	find_package(Qt5 COMPONENTS Widgets Core Gui REQUIRED)
endif()

if(("${CMAKE_BUILD_TYPE}" STREQUAL "Release") OR ("${CMAKE_BUILD_TYPE}" STREQUAL "RelWithDebInfo"))
	find_package(OpenMP)
endif()

find_package(Mathematica COMPONENTS MathLink)
find_package(aliasMethod REQUIRED)

if(WIN32)
	find_package(mpfr)
	find_package(mpir)
else()
	#mpfr needs to be listed as an imported target so that we can use target_link_librarie later on. If we don't have this then it just adds a -lmpfr which probably picks up the wrong thing. 
	find_library(mpfr_LIBRARY mpfr)
	add_library(mpfr SHARED IMPORTED)
	set_target_properties(mpfr PROPERTIES IMPORTED_LOCATION ${mpfr_LIBRARY})
endif()
add_subdirectory(residualConnectivityCommon)
add_subdirectory(crudeMC)
add_subdirectory(exhaustiveProbability)
add_subdirectory(exhaustiveSearch)
add_subdirectory(usingBiconnectedSplitting)
add_subdirectory(optimalStateIndependentImportance)
add_subdirectory(transferMatrix)
add_subdirectory(transferMatrixCommon)
add_subdirectory(transferMatrixEstimation)
add_subdirectory(conditionalMC)
add_subdirectory(cancela2002RVR)
add_subdirectory(gridCountSpecificSize)
add_subdirectory(gridCountSpecificSize2)
if(${Mathematica_MathLink_FOUND})
	add_subdirectory(getMinimumReliability)
endif()
add_subdirectory(splittingBasic)
if(BUILD_VISUALISATION)
	add_subdirectory(subObservationVisualiser)
endif()
add_subdirectory(articulationConditioningSplitting)
add_subdirectory(articulationConditioningResampling)
add_subdirectory(expectedVertexCount)
if(BUILD_R_PACKAGE)
	add_subdirectory(RPackage)
endif()

set(RESIDUAL_CONNECTIVITY_COMMON_LIBRARY $<TARGET_FILE:residualConnectivityCommon>)
set(RESIDUAL_CONNECTIVITY_CRUDEMC_LIBRARY $<TARGET_FILE:crudeMCLib>)
configure_file(${PROJECT_SOURCE_DIR}/residualConnectivityConfig.cmake.in ${PROJECT_BINARY_DIR}/residualConnectivityConfig.cmake @ONLY)
if(NOT WIN32)
	file(GENERATE OUTPUT ${PROJECT_BINARY_DIR}/residualConnectivityConfig.cmake INPUT ${PROJECT_BINARY_DIR}/residualConnectivityConfig.cmake)
endif()

if(NOT DEFINED ${CMAKE_FIND_LIBRARY_PREFIXES})
	set(CMAKE_FIND_LIBRARY_PREFIXES "")
endif()

if(BUILD_R_PACKAGE)
	find_package(R REQUIRED)
	add_custom_target(residualConnectivityRPackage_install COMMAND ${R_COMMAND} CMD INSTALL RPackage WORKING_DIRECTORY ${PROJECT_BINARY_DIR})
	install(CODE "execute_process(COMMAND \"${CMAKE_COMMAND}\" --build . --target residualConnectivityRPackage_install)")
endif()
